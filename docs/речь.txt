ВКР речь

1

Здравствуйте, меня зовут Кульбако Артемий Юрьевич, мой руководитель Гаврилов Антон Валерьевич, с работой »Автоматизация индексирования базы данных на основе истории запросов». 

2

Проблема: старые базы данных могут содержать сложные и непонятные запросы, скорость выполнения которых необходимо увеличить, но ручная оптимизация таких запросов дело долгое, сложное, и сильно зависящее от опыта работы сотрудника с конкретной СУБД и даталогической моделью, а бизнес как обычно требует сделать это «уже вчера». 

Как мы можете НЕ видеть, на слайде пример такого запроса, состоящего из более чем двухсот строк, который попался мне на работе.

3

Таким образом, целями работы является минимизация времени на оптимизацию БД пользователем и увеличение скорости выполнения запросов к БД. 

Главной задачей для достижения цели является разработка приложения, которое автоматизирует процесс построения индексов. 

Автоматизация освободит время пользователя: полностью, или для тех запросов, которые он не будет разбирать вручную, а индексация увеличит скорость выполнения.

4

Идея не нова, но если обратиться к рейтингу самых популярных СУБД, только две имеют схожую функциональность.

5

Такими являются Oracle Database и Microsoft SQL Server в составе подписки Azure.

Это платные решения, процесс автоиндексирования представляет из себя «чёрный ящик», неконтролируем, а с недавних пор их нельзя официально приобрести в России.

Преимуществами моего решения является поддержка любой СУБД, при наличии jdbc-драйвера к ней, и контролируемость процесса, путём построения отчётов о работе.

6

Приложение поделено на клиент-сервер: сделано это потому, что если приложения будет развернуто в локальной сети предприятия, несколько клиентов смогут получить к нему доступ для автоиндексирования своих баз данных. 

Сервер написан на Kotlin, потому что была важна поддержка как можно большего количества конфигураций операционная система - архитектура компьютера, клиентская часть на React.

Пользователь формирует историю запросов SQL, импортированную из СУБД, кода информационной системы предприятия, путём проксирования запрос, вручную заполняя запроса в интерфейсе клиента, вообщем, как ему удобно, и запускает через клиент задачу на автоиндексирование этой истории.

Та как процесс автоиндексирования может быть длительным, а потому формирования отчёта происходит асинхронно: пользователь указывает куда ему получить отчёт из списка поддерживаемых методов, к примеру почта или sftp-диск, и после постановки задачи клиент освобождается.

7

Для автоиндексирования система перебирает все возможные комбинации »таблица-поле-индекс» каждого запроса в истории, измеряет время выполнения до и после, выбирая лучший индекс по скорости выполнения.

8

В систему легко добавить поддержку новой СУБД, для этого нужно лишь подключить соответствующий JDBC-драйвер и переопределить один единственный метод, который отвечает за конвертацию выражений построения индексов из ANSI-SQL в СУБД-специфичный синтаксис.

В рамках выпускной квалификационной работы я реализовал поддержку PostgreSQL и для своих целей SQLServer.

9

На этом слайде представлен графический интерфейс клиента, который позволяет вручную добавлять SQL-выражения, есть подсветка синтаксиса.

10

Пример отрывка из отчёта, формируемого для каждого SQL-запроса истории, где указан используемый индекс, разница времени выполнения с оригинальных запросов и общее время выполнения запроса вместе с индексом.

При поставке задачи автоиндексации, пользователь может указать, должно ли система сохранять наилучший индекс или он сделает это сам на основе отчётов.

11

На этом слайде можно увидеть, как изменилось время выполнения нескольких запросов к БД после работы программы. Наблюдается тенденция, что чем сложнее запрос, тем больше уменьшается время.

12

Программа выполняет поставленные цели, а потому я считаю, что работы выполнена успешно.

13

Спасибо за внимание! Готов к вашим вопросам.


